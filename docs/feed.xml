<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-10-01T04:34:40-04:00</updated><id>/feed.xml</id><title type="html">Kirill Dubovikov</title><subtitle>My thoughts on everything :)</subtitle><author><name>Kirill Dubovikov</name></author><entry><title type="html">Building a Weather Station Bot</title><link href="/articles/rust/building-a-weather-station-bot" rel="alternate" type="text/html" title="Building a Weather Station Bot" /><published>2020-09-18T20:00:00-04:00</published><updated>2020-09-18T20:00:00-04:00</updated><id>/articles/rust/building-a-weather-station-bot</id><author><name>Kirill Dubovikov</name></author><category term="rust" /><summary type="html">In this post we are going to switch from hardware to software and write a telegram bot that will be the primary user interface for our weather station.</summary></entry><entry><title type="html">Async Unicorns love Rust</title><link href="/articles/rust/async-unicorns-love-rust" rel="alternate" type="text/html" title="Async Unicorns love Rust" /><published>2020-07-26T20:00:00-04:00</published><updated>2020-07-26T20:00:00-04:00</updated><id>/articles/rust/async-unicorns-love-rust</id><author><name>Kirill Dubovikov</name></author><category term="rust" /><summary type="html">Before going on to write a backend for our weather station we first need to familiarize ourselves with a few concepts from the Rust world. If you are unfamiliar with the language take a few minutes to read through Learn Rust in Y minutes to get used to the syntax. When we will write a Telegram bot with Rust, we will use a technique called asynchronous programming. Letâ€™s tackle what that means.</summary></entry><entry><title type="html">Building yourself a weather station. Part 2</title><link href="/articles/hardware/build-yourself-a-weathe-station-part-2" rel="alternate" type="text/html" title="Building yourself a weather station. Part 2" /><published>2020-06-20T20:00:00-04:00</published><updated>2020-06-20T20:00:00-04:00</updated><id>/articles/hardware/build-yourself-a-weathe-station-part-2</id><author><name>Kirill Dubovikov</name></author><category term="hardware" /><summary type="html">Writing code for ESP32 In the previous post, we have covered the hardware setup for building a weather station. Starting from now, we will start coding. The first missing piece is the firmware for ESP32.</summary></entry><entry><title type="html">Build yourself a weather station. Part I</title><link href="/articles/hardware/build-yourself-a-weather-station" rel="alternate" type="text/html" title="Build yourself a weather station. Part I" /><published>2020-06-12T20:00:00-04:00</published><updated>2020-06-12T20:00:00-04:00</updated><id>/articles/hardware/build-yourself-a-weather-station</id><author><name>Kirill Dubovikov</name></author><category term="hardware" /><summary type="html">Intro I live pretty far away from the office, so my commute can take from 2.5 to 4 hours a day ðŸ˜±. That includes a lot of time walking. I lost the count of times when I forgot to check if there was rain when going out from home. Or, even worse, the rain came in when I was midway to the train station. As a plus, the Weather app on my iPhone is not very good at making accurate forecasts. It can easily convince me that there is sunny outside when a sneaky rain starts to drop. A couple of months ago I started diving into the electronics, microcontrollers, and PCBs, so a side-project idea naturally came up to a surface. Iâ€™ll create a simple weather station that will check humidity and temperature outside every morning and notify me if I need to take an umbrella or warm clothes. This is a fun and easy IoT project from the hardware perspective, so I decided to give it a try. In this series of posts, we will cover how to build an IoT weather station powered up by a web dashboard and Telegram bot. We will start from the birds-eye view first and cover the architecture of what we are going to make.</summary></entry></feed>